pub enum Id {
  NONE
  MORPH
  RECOVERY
  MAPLE_WARRIOR
  STANCE
  SHARP_EYES
  MANA_REFLECTION
  SHADOW_CLAW
  INFINITY_
  HOLY_SHIELD
  HAMSTRING
  BLIND
  CONCENTRATE
  ECHO_OF_HERO
  GHOST_MORPH
  AURA
  CONFUSE
  BERSERK_FURY
  DIVINE_BODY
  SPARK
  FINALATTACK
  BATTLESHIP
  WATK
  WDEF
  MATK
  MDEF
  ACC
  AVOID
  HANDS
  SHOWDASH
  SPEED
  JUMP
  MAGIC_GUARD
  DARKSIGHT
  BOOSTER
  POWERGUARD
  HYPERBODYHP
  HYPERBODYMP
  INVINCIBLE
  SOULARROW
  STUN
  POISON
  SEAL
  DARKNESS
  COMBO
  SUMMON
  WK_CHARGE
  DRAGONBLOOD
  HOLY_SYMBOL
  MESOUP
  SHADOWPARTNER
  PICKPOCKET
  PUPPET
  MESOGUARD
  WEAKEN
  DASH
  DASH2
  ELEMENTAL_RESET
  ARAN_COMBO
  COMBO_DRAIN
  COMBO_BARRIER
  BODY_PRESSURE
  SMART_KNOCKBACK
  PYRAMID_PQ
  ENERGY_CHARGE
  MONSTER_RIDING
  HOMING_BEACON
  SPEED_INFUSION
  ZOMBIFY
  CURSE
  SEDUCE
  SLOW
} derive(Eq, Debug)

pub let values : FixedArray[Id] = [
  NONE,
  MORPH,
  RECOVERY,
  MAPLE_WARRIOR,
  STANCE,
  SHARP_EYES,
  MANA_REFLECTION,
  SHADOW_CLAW,
  INFINITY_,
  HOLY_SHIELD,
  HAMSTRING,
  BLIND,
  CONCENTRATE,
  ECHO_OF_HERO,
  GHOST_MORPH,
  AURA,
  CONFUSE,
  BERSERK_FURY,
  DIVINE_BODY,
  SPARK,
  FINALATTACK,
  BATTLESHIP,
  WATK,
  WDEF,
  MATK,
  MDEF,
  ACC,
  AVOID,
  HANDS,
  SHOWDASH,
  SPEED,
  JUMP,
  MAGIC_GUARD,
  DARKSIGHT,
  BOOSTER,
  POWERGUARD,
  HYPERBODYHP,
  HYPERBODYMP,
  INVINCIBLE,
  SOULARROW,
  STUN,
  POISON,
  SEAL,
  DARKNESS,
  COMBO,
  SUMMON,
  WK_CHARGE,
  DRAGONBLOOD,
  HOLY_SYMBOL,
  MESOUP,
  SHADOWPARTNER,
  PICKPOCKET,
  PUPPET,
  MESOGUARD,
  WEAKEN,
  DASH,
  DASH2,
  ELEMENTAL_RESET,
  ARAN_COMBO,
  COMBO_DRAIN,
  COMBO_BARRIER,
  BODY_PRESSURE,
  SMART_KNOCKBACK,
  PYRAMID_PQ,
  ENERGY_CHARGE,
  MONSTER_RIDING,
  HOMING_BEACON,
  SPEED_INFUSION,
  ZOMBIFY,
  CURSE,
  SEDUCE,
  SLOW,
]

pub fn int_value(self : Id) -> Int {
  values.search(self).unwrap()
}

fn hash(self : Id) -> Int {
  self.int_value()
}

pub fn is_disease(buff_id : Id) -> Bool {
  diseases.find(buff_id).is_empty().not()
}

pub let first_codes : @immut/hashmap.Map[Id, Int64] = @immut/hashmap.from_array(
  [
    (Id::DASH2, 0x8000000000000L),
    (Id::DASH, 0x10000000000000L),
    (Id::ELEMENTAL_RESET, 0x200000000L),
    (Id::ARAN_COMBO, 0x1000000000L),
    (Id::COMBO_DRAIN, 0x2000000000L),
    (Id::COMBO_BARRIER, 0x4000000000L),
    (Id::BODY_PRESSURE, 0x8000000000L),
    (Id::SMART_KNOCKBACK, 0x10000000000L),
    (Id::PYRAMID_PQ, 0x20000000000L),
    (Id::ENERGY_CHARGE, 0x4000000000000L),
    (Id::MONSTER_RIDING, 0x20000000000000L),
    (Id::HOMING_BEACON, 0x80000000000000L),
    (Id::SPEED_INFUSION, 0x100000000000000L),
  ],
)

pub let second_codes : @immut/hashmap.Map[Id, Int64] = @immut/hashmap.from_array(
  [
    (Id::NONE, 0x0L),
    (Id::SLOW, 0x1L),
    (Id::MORPH, 0x2L),
    (Id::RECOVERY, 0x4L),
    (Id::MAPLE_WARRIOR, 0x8L),
    (Id::STANCE, 0x10L),
    (Id::SHARP_EYES, 0x20L),
    (Id::MANA_REFLECTION, 0x40L),
    (Id::SEDUCE, 0x80L),
    (Id::SHADOW_CLAW, 0x100L),
    (Id::INFINITY_, 0x200L),
    (Id::HOLY_SHIELD, 0x400L),
    (Id::HAMSTRING, 0x800L),
    (Id::BLIND, 0x1000L),
    (Id::CONCENTRATE, 0x2000L),
    (Id::ECHO_OF_HERO, 0x8000L),
    (Id::GHOST_MORPH, 0x20000L),
    (Id::AURA, 0x40000L),
    (Id::ZOMBIFY, 0x4000L),
    (Id::CONFUSE, 0x80000L),
    (Id::BERSERK_FURY, 0x8000000L),
    (Id::DIVINE_BODY, 0x10000000L),
    (Id::SPARK, 0x20000000L),
    (Id::FINALATTACK, 0x80000000L),
    (Id::BATTLESHIP, 0xA00000040L),
    (Id::WATK, 0x100000000L),
    (Id::WDEF, 0x200000000L),
    (Id::MATK, 0x400000000L),
    (Id::MDEF, 0x800000000L),
    (Id::ACC, 0x1000000000L),
    (Id::AVOID, 0x2000000000L),
    (Id::HANDS, 0x4000000000L),
    (Id::SHOWDASH, 0x4000000000L),
    (Id::SPEED, 0x8000000000L),
    (Id::JUMP, 0x10000000000L),
    (Id::MAGIC_GUARD, 0x20000000000L),
    (Id::DARKSIGHT, 0x40000000000L),
    (Id::BOOSTER, 0x80000000000L),
    (Id::POWERGUARD, 0x100000000000L),
    (Id::HYPERBODYHP, 0x200000000000L),
    (Id::HYPERBODYMP, 0x400000000000L),
    (Id::INVINCIBLE, 0x800000000000L),
    (Id::SOULARROW, 0x1000000000000L),
    (Id::STUN, 0x2000000000000L),
    (Id::POISON, 0x4000000000000L),
    (Id::SEAL, 0x8000000000000L),
    (Id::DARKNESS, 0x10000000000000L),
    (Id::COMBO, 0x20000000000000L),
    (Id::SUMMON, 0x20000000000000L),
    (Id::WK_CHARGE, 0x40000000000000L),
    (Id::DRAGONBLOOD, 0x80000000000000L),
    (Id::HOLY_SYMBOL, 0x100000000000000L),
    (Id::MESOUP, 0x200000000000000L),
    (Id::SHADOWPARTNER, 0x400000000000000L),
    (Id::PICKPOCKET, 0x800000000000000L),
    (Id::PUPPET, 0x800000000000000L),
    (Id::MESOGUARD, 0x1000000000000000L),
    (Id::WEAKEN, 0x4000000000000000L),
    (Id::CURSE, 0x8000000000000000L),
  ],
)

pub let diseases : @immut/hashmap.Map[Id, Int64] = @immut/hashmap.from_array(
  [
    (Id::SLOW, 0x1L),
    (Id::SEDUCE, 0x80L),
    // (Id::FISHABLE, 0x100), 
    (Id::CURSE, 0x8000000000000000L),
    (Id::ZOMBIFY, 0x4000L),
    (Id::CONFUSE, 0x80000L),
    (Id::STUN, 0x2000000000000L),
    (Id::POISON, 0x4000000000000L),
    (Id::SEAL, 0x8000000000000L),
    (Id::DARKNESS, 0x10000000000000L),
    (Id::WEAKEN, 0x4000000000000000L),
  ],
)

pub struct Buff {
  stat : Id
  value : Int
  skillid : Int
  duration : Int
}

pub fn Buff::make(
  stat : Id,
  value : Int,
  skillid : Int,
  duration : Int
) -> Buff {
  { stat, value, skillid, duration }
}

pub fn Buff::default() -> Buff {
  { stat: Id::NONE, value: 0, skillid: 0, duration: 0 }
}
